OrExp
  = head:AndExpr tail:(_ or _ AndExpr)* {
  	  return tail.reduce(function(result, element) {
      	if(result.value=="") { // OR operator used without left operand
        	result.value = "OR";
        }
        
        if(element[3].value=="") { // OR operator used without right operand
        	element[3].value = "OR";    
        }

        if (element[1] === "OR") { 
          return {
            operator: "OR",
            left: result,
            right: element[3]
          }
        }
      }, head);
    }

AndExpr
  = head:NotExpr tail:(_ and _ NotExpr)* {
      return tail.reduce(function(result, element) {
        if(result.value=="") { // AND operator used without left operand
          if(element[3].value=="") { // AND operator used without right operand
          	element[3].value = "AND";
          }
          result.value = "AND";
            return {
              operator: "OR",
              left: result,
              right: element[3]
            }
        }
          
        if(element[3].value=="") { // AND operator used without right operand
          element[3].value = "AND";
          return {
            operator: "OR",
            left: result,
            right: element[3]
          }
        }
        if (element[1] === "AND"|| element[1] === ",") { 
          return {
            operator: "AND",
            left: result,
            right: element[3]
          }
        }
      }, head);
    }

NotExpr
  = not _ right:NotExpr
    {
      return {
        operator: "NOT",
        right
      }
    }
  / head:(ParenthesisTerm _)? not _ right:ParenthesisTerm
    {
      let left = null;
      
      if (head) {
        left = head[0]
      }

      return {
        operator: "NOT",
        left: left,
        right
      }
    }
  / ParenthesisTerm

ParenthesisTerm
  = "(" _ expr:OrExp _ ")" { return expr; }
  / Term

Term
  = DOUBLE_QUOTES term:[^"”“]+ DOUBLE_QUOTES 
    {
      return {
        type: 'phrase',
        value: term.join("")
      }
    }
  / term:textWithoutAdvancedOperator
    {
      return {
        type: 'term',
        value: term
      }
    }
  / term:[^("|”|“| |,)]+ 
    {
      return {
        type: 'term',
        value: term.join("")
      }
    }

and
  = "AND"
  / ","
  
or
  = "OR"

not
  = "NOT"

textWithoutAdvancedOperator = $(!breakWord .)* { return text().trim() }

breakWord
  = and
  / or
  / not
  / "("
  / ")"
  / DOUBLE_QUOTES

_ "whitespace"
  = [ \t\n\r]*
  
DOUBLE_QUOTES
  = ["“”]
